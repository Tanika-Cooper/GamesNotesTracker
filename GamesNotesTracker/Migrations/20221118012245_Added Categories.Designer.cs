// <auto-generated />
using System;
using GamesNotesTracker.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GamesNotesTracker.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20221118012245_Added Categories")]
    partial class AddedCategories
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GamesNotesTracker.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryImage = "None",
                            CategoryName = "Pokemon",
                            UserId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryImage = "None",
                            CategoryName = "Fire Emblem",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("GamesNotesTracker.Models.CategoryItem", b =>
                {
                    b.Property<int>("CategoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("NoteListId")
                        .HasColumnType("int");

                    b.HasKey("CategoryItemId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryItems");

                    b.HasData(
                        new
                        {
                            CategoryItemId = 1,
                            CategoryId = 1,
                            NoteListId = 1
                        });
                });

            modelBuilder.Entity("GamesNotesTracker.Models.NoteContent", b =>
                {
                    b.Property<int>("NoteContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NoteContents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteContentId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            NoteContentId = 1,
                            NoteContents = "Testing the note.",
                            NoteName = "Test Note"
                        });
                });

            modelBuilder.Entity("GamesNotesTracker.Models.NoteItem", b =>
                {
                    b.Property<int>("NoteItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("NoteListId")
                        .HasColumnType("int");

                    b.HasKey("NoteItemId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NoteListId");

                    b.ToTable("NoteItems");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.NoteList", b =>
                {
                    b.Property<int>("NoteListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ListName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NoteListId");

                    b.HasIndex("CategoryItemId");

                    b.HasIndex("UserId");

                    b.ToTable("NoteLists");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("GamesNotesTracker.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "testAdmin@gmail.com",
                            Name = "Tanika",
                            Password = "$2a$11$iOztueuvWaTvxErRMk/msOib85vCfGft7vtd6qR7gVuOjZJsIgfIe"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "testUser@gmail.com",
                            Name = "Kyle",
                            Password = "$2a$11$741xtkF2J5l8YOBcHYXeMerJjMFIVUgQE71zIwYO7poqQgFEvjJpu"
                        });
                });

            modelBuilder.Entity("GamesNotesTracker.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            RoleId = 2,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 3,
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("GamesNotesTracker.Models.Category", b =>
                {
                    b.HasOne("GamesNotesTracker.Models.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.CategoryItem", b =>
                {
                    b.HasOne("GamesNotesTracker.Models.Category", null)
                        .WithMany("CategoryItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesNotesTracker.Models.NoteItem", b =>
                {
                    b.HasOne("GamesNotesTracker.Models.NoteContent", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesNotesTracker.Models.NoteList", "NoteLists")
                        .WithMany("NoteItems")
                        .HasForeignKey("NoteListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("NoteLists");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.NoteList", b =>
                {
                    b.HasOne("GamesNotesTracker.Models.CategoryItem", null)
                        .WithMany("NoteLists")
                        .HasForeignKey("CategoryItemId");

                    b.HasOne("GamesNotesTracker.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.UserRole", b =>
                {
                    b.HasOne("GamesNotesTracker.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesNotesTracker.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.Category", b =>
                {
                    b.Navigation("CategoryItems");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.CategoryItem", b =>
                {
                    b.Navigation("NoteLists");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.NoteList", b =>
                {
                    b.Navigation("NoteItems");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GamesNotesTracker.Models.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
